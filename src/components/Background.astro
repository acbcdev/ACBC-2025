<canvas id="backgroundCanvas" class="fixed inset-0 -z-10"> </canvas>

<slot />
<script>
  const canvas = document.getElementById(
    "backgroundCanvas",
  ) as HTMLCanvasElement;
  const ctx = canvas.getContext("2d");

  // Configuración de puntos
  const dots: Dot[] = [];
  const numberOfDots = 250;

  interface Dot {
    x: number;
    y: number;
    size: number;
    opacity: number;
  }

  function createDot(): Dot {
    return {
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      size: Math.random() * 1.5 + 0.5, // Tamaño entre 0.5 y 2 píxeles
      opacity: Math.random() * 0.3 + 0.05, // Opacidad entre 0.05 y 0.3
    };
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    drawBackground(); // Redibujar cuando cambie el tamaño
  }

  function drawBackground() {
    if (!ctx) return;

    // Limpiar canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Fondo oscuro
    ctx.fillStyle = "#121212";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Efecto de luz en la parte superior
    const gradient = ctx.createRadialGradient(
      canvas.width / 2,
      0,
      0,
      canvas.width / 2,
      0,
      canvas.height,
    );

    gradient.addColorStop(0, "rgba(255, 255, 255, 0.15)");
    gradient.addColorStop(1, "rgba(255, 255, 255, 0)");

    ctx.fillStyle = gradient;

    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Dibujar puntos
    dots.forEach((dot) => {
      ctx.beginPath();
      ctx.arc(dot.x, dot.y, dot.size, 0, Math.PI * 2);
      ctx.fillStyle = `rgba(255, 255, 255, ${dot.opacity * 0.5})`;
      ctx.fill();
    });
  }

  function init() {
    resizeCanvas();

    // Crear puntos iniciales
    for (let i = 0; i < numberOfDots; i++) {
      dots.push(createDot());
    }

    // Event listener para resize
    window.addEventListener("resize", resizeCanvas);

    // Dibujar una sola vez ya que no hay animación
    drawBackground();
  }

  init();
</script>
